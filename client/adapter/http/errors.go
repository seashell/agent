package http

import (
	"fmt"
)

const (
	ErrNotFound         = "Not found"
	ErrInternal         = "Internal error"
	ErrBadRequest       = "Bad request"
	ErrMethodNotAllowed = "Method not allowed"
)

// CodedError represents an error generated by an HTTP handler.
// Besides implementing the standard error interface, it also
// implements the http.Error interface, which includes a method
// for obtaining the HTTP status code associated with the error.
type CodedError struct {
	// Code is an HTTP status code associated with the error.
	code int

	// Message is a human-readable message that describes the error.
	Message string
}

// NewCodedError : creates a new HTTPError object.
func NewCodedError(code int, s string, extra ...interface{}) CodedError {
	msg := s
	// TODO: only append extra to msg if DEBUG enabled
	for _, v := range extra {
		msg = fmt.Sprintf("%s : %v", msg, v)
	}
	return CodedError{code, msg}
}

// Error returns a string representation for the Error type.
func (e CodedError) Error() string {
	return fmt.Sprintf("%s", e.Message)
}

// Code returns the HTTP status code associated with the error.
func (e CodedError) Code() int {
	return e.code
}
